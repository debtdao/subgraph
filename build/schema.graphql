# https://github.com/messari/subgraphs/blob/master/schema-generic.graphql
type Token @entity {
  # " Smart contract address of the token "
  id: ID!

  # " Name of the token, mirrored from the smart contract "
  name: String!
  # " Symbol of the token, mirrored from the smart contract "
  symbol: String!
  # " The number of decimal places this token uses, default to 18 "
  decimals: Int!
  # " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal
  # " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

# LoC
type LineOfCredit @entity {
  id: ID!
  # LoC, Bullet, etc.
  type: String!
  # when loan was deployed
  start: Int!
  # when ttl expires
  end: Int!
  # 
  status: String!

  # modules
  escrow: Escrow @derivedFrom(field: "contract")
  spigot: SpigotController @derivedFrom(field: "contract")

  #stakeholders
  borrower: Borrower!
  oracle: Bytes!
  arbiter: Bytes!

  # `debts` not guaranteed to return in order of repayment queue like smart contract
  debts: [DebtPosition!] @derivedFrom(field: "contract")
  events: [DebtEvent!]  @derivedFrom(field: "contract")
}

type DebtPosition @entity {
  id: ID!       # keccak(loan,lender,token)
  contract: LineOfCredit!
  token: Token!
  lender: Lender!
  borrower: Borrower!
  # 0 indexed position in repayment queue
  # only has value if drawndown
  queue: Int
  
  deposit: BigInt!
  principal: BigInt!
  principalUsd: BigDecimal!
  interestAccrued: BigInt!
  interestUsd: BigDecimal!
  interestRepaid: BigInt!
  totalInterestEarned: BigInt! # lifetime gross revenue of lender on position

  # interest in bps charged on principal
  drawnRate: Int!
  # interest in bps charged on deposit less principal
  facilityRate: Int!
}

type Lender @entity {
  id: ID!
  credits: [DebtPosition!] @derivedFrom(field: "lender")
}

type Borrower @entity {
  id: ID!
  contracts: [LineOfCredit!] @derivedFrom(field: "borrower") # all contracts
  debts: [DebtPosition!] @derivedFrom(field: "borrower") # all debts on all contracts
}

#  EVENTS 

# dont need to track in database, just need event to initialize data
# type DeployLoanEvent  @entity {
#   id: ID!
#   block: BigInt!
#   timestamp: BigInt!

#   oracle: Bytes!
#   arbiter: Bytes!
#   bottower: Bytes!
# }


interface DebtEvent {
  id: ID!                 # block-logIndex
  block: BigInt!
  timestamp: BigInt!
  contract: LineOfCredit! # could get from DebtPosition but this makes it easier to traverse
  positionId: DebtPosition!
}

type UpdateStatusEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  status: Int!
}

type AddPositionEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
  drawnRate: BigInt!
  facilityRate: BigInt!
}

type ClosePositionEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!
}

type WithdrawProfitEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type WithdrawDepositEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type BorrowEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type InterestAccruedEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type RepayInterestEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type RepayPrincipalEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}


type LiquidateEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal! # not necessarily the amount received from executingliquidation 
  liquidator: Bytes!  # contract or arbiter responsible for executing liquidations

}

type DefaultEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
}

type UpdateRatesEvent implements DebtEvent @entity {
  id: ID! # block-logIndex
  positionId: DebtPosition!
  block: BigInt!
  timestamp: BigInt!

  drawnRate: Int!    # bps
  facilityRate: Int! # bps
}


# MODULES

# Spigot / Spigot Consumer

type SpigotController @entity {
  id: ID! # address
  contract: LineOfCredit! # a.k.a `owner`

  operator: Bytes!
  treasury: Bytes!

  dex: Bytes! # zero ex exchange address we trade against

  spigots: [Spigot!] @derivedFrom(field: "controller")
}

type WhitelistFunctionEvent @entity {
  id: ID! # block-logIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  func: Bytes!
  whitelisted: Boolean!
}

type Spigot @entity {
  id: ID! # spigot-revenueContract
  controller: SpigotController!
  
  contract: Bytes!
  token: Token!
  ownerSplit: Int!

  events: [SpigotEvent!] @derivedFrom(field: "spigot")
}

interface SpigotEvent {
  id: ID! # block-logIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!
}

type AddSpigotEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!
}

type RemoveSpigotEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!
}

type ClaimRevenueEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!

  revenueToken: Token!
  escrowed: BigInt! 
  netIncome: BigInt! # amount of tokens sent to Treasury after Loan cut escrowed
}

# @dev only tracks revenue. does not track actual loan repayment
type TradeRevenueEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!

  revenueToken: Token!
  sold: BigInt! # amount of tokens about

  debtToken: Token!
  bought: BigInt!
}

# Escrow

type Escrow @entity {
  id: ID! # address
  oracle: Bytes!
  contract: LineOfCredit!
  collateralValue: BigDecimal!
  cratio: BigDecimal!
  minCRatio: BigDecimal!
  deposits: [EscrowDeposit!]! @derivedFrom(field: "escrow")
}

type EscrowDeposit @entity {
  id: ID! # address-token
  escrow: Escrow!
  token: Token!
  amount: BigInt!
}

interface EscrowEvent {
  id: ID! # block-logIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
}

type AddCollateralEvent implements EscrowEvent @entity {
  id: ID! # block-logIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
}

type RemoveCollateralEvent implements EscrowEvent @entity {
  id: ID! # block-logIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
}

# LiquidateEvent handled in LineOfCredit because more data available
