# https://github.com/messari/subgraphs/blob/master/schema-generic.graphql
type Token @entity {
  # " Smart contract address of the token "
  id: ID!

  # " Name of the token, mirrored from the smart contract "
  name: String!
  # " Symbol of the token, mirrored from the smart contract "
  symbol: String!
  # " The number of decimal places this token uses, default to 18 "
  decimals: Int!
  # " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal
  # " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

# LoC
type LineOfCredit @entity {
  id: ID!
  # LoC, Bullet, etc.
  type: String
  # when line was deployed
  start: Int!
  # when ttl expires
  end: Int!
  # 
  status: String!
   # optional. amount of reveue line gets from spigot inflows
  defaultSplit: Int!

  # 0x exchange address we trade against
  dex: Bytes!

  #stakeholders
  borrower: Borrower!
  oracle: Bytes!
  arbiter: Bytes!

  # modules
  escrow: Escrow @derivedFrom(field: "line")
  spigot: SpigotController @derivedFrom(field: "line")

  # `lines` not guaranteed to return in order of repayment queue like smart contract
  positions: [Position!] @derivedFrom(field: "line")
  events: [LineEventWithValue!]  @derivedFrom(field: "line")
}

type Position @entity {
  id: ID!       # keccak(line,lender,token)
  line: LineOfCredit!
  token: Token!
  # if position is proposed, accepted, or closed.
  status: String

  # used to easily find positions by stakeholder
  lender: Lender!
  borrower: Borrower!

  # 0 indexed position in repayment queue
  # only has value if drawndown
  queue: Int
  
  deposit: BigInt!
  principal: BigInt!
  # current amount of outstanding interest owed but not repaid by borrower
  interestAccrued: BigInt!
  # current amount of accrued interest payments repaid and waiting for lender to claim
  interestRepaid: BigInt!
  # lifetime gross revenue of lender on position
  totalInterestEarned: BigInt!
  # interest in bps charged on principal
  dRate: Int!
  # interest in bps charged on deposit less principal
  fRate: Int!

  # TODO remove usd vals, use Token price to calculate. Suffers same stale data issues as contracts
  principalUsd: BigDecimal!
  interestUsd: BigDecimal!

  events: [LineEventWithValue!]  @derivedFrom(field: "position")
}

type Lender @entity {
  id: ID!
  positions: [Position!] @derivedFrom(field: "lender")
}

type Borrower @entity {
  id: ID!
  lines: [LineOfCredit!] @derivedFrom(field: "borrower") # all contracts
  positions: [Position!] @derivedFrom(field: "borrower") # all Ï€ositions on all contracts
}

#  Line EVENTS 

# dont need to track in database, just need event to initialize data
# type DeployLineEvent  @entity {
#   id: ID!
#   block: BigInt!
#   timestamp: BigInt!

#   oracle: Bytes!
#   arbiter: Bytes!
#   bottower: Bytes!
# }

interface EventWithValue {
  id: ID!                 # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  amount: BigInt!
  value: BigDecimal!
}

interface LineEvent {
  id: ID!                 # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit! # could get from Position but this makes it easier to traverse
  position: Position!
}

interface LineEventWithValue implements LineEvent & EventWithValue {
  id: ID!                 # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit! # could get from Position but this makes it easier to traverse
  position: Position!
  amount: BigInt!
  value: BigDecimal!
}

type UpdateStatusEvent implements LineEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  status: Int!
}

type ProposeTermsEvent implements LineEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  funcSignature: String! # hexcode e.g. 0x12345678
  params: [Bytes!]  # all proposed terms 
}


type AddCreditEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type IncreaseCreditEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  # always 0, needed for compatability
  amount: BigInt!
  value: BigDecimal!
}

type ClosePositionEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  # always 0, needed for compatability
  amount: BigInt!
  value: BigDecimal!
}

type WithdrawProfitEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type WithdrawDepositEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type BorrowEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type InterestAccruedEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type RepayInterestEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type RepayPrincipalEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}


type LiquidateEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal! # not necessarily the amount received from executingliquidation 
  liquidator: Bytes!  # contract or arbiter responsible for executing liquidations
}

type DefaultEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  amount: BigInt!
  value: BigDecimal!
}

type SetRatesEvent implements LineEventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  block: BigInt!
  timestamp: BigInt!
  line: LineOfCredit!
  position: Position!

  dRate: Int! # bps
  fRate: Int! # bps

  # always 0, needed for compatability
  amount: BigInt!
  value: BigDecimal!
}


# MODULES

# Spigot / Spigot Consumer

type SpigotController @entity {
  id: ID!                         # address
  owner: Bytes!
  line: LineOfCredit          # should be `owner` if configured for collateral
  startTime: BigInt!              # timestamp when deployed

  operator: Bytes!
  treasury: Bytes!

  summaries: [SpigotRevenueSummary!] @derivedFrom(field: "controller")
  spigots: [Spigot!] @derivedFrom(field: "controller")
  events: [SpigotControllerEvent!] @derivedFrom(field: "controller")
}

type SpigotRevenueSummary @entity {
  id: ID!                       # controller-token
  controller: SpigotController!
  token: Token!                 # token revenue is earned in
  timeOfFirstIncome: BigInt!
  timeOfLastIncome: BigInt!
  totalVolume: BigInt!
  totalVolumeUsd: BigDecimal!
}

interface SpigotControllerEvent {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!
}

type UpdateOwnerEvent implements SpigotControllerEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  oldOwner: Bytes!
  newOwner: Bytes!
}

type UpdateOperatorEvent implements SpigotControllerEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  oldOperator: Bytes!
  newOperator: Bytes!
}

type UpdateTreasuryEvent implements SpigotControllerEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  oldTreasury: Bytes!
  newTreasury: Bytes!
}

type UpdateWhitelistFunctionEvent implements SpigotControllerEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  func: Bytes!
  whitelisted: Boolean!
}

type ClaimEscrowEvent implements SpigotControllerEvent & EventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!
  to: LineOfCredit!

  amount: BigInt! # amount of tokens sent to Owner from escrow
  value: BigDecimal!
}

# TODO rename Seting and Controlelr to Spigot
type Spigot @entity {
  id: ID!                       # spigot-revenueContract
  controller: SpigotController!
  contract: Bytes!              # revenue generating contract
  startTime: BigInt!            # time that spigot started

  active: Boolean!              # if contract is currently attached to spigot
  ownerSplit: Int!              # % of tokens escrowed for owner
  escrowed: BigInt!             # current amount of tokens available for owner to claim

  totalVolumeUsd: BigDecimal!    # usd value of all tokens total volume
  
  events: [SpigotEvent!] @derivedFrom(field: "spigot")
}

interface SpigotEvent {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  revenueToken: Token!
  block: BigInt!
  timestamp: BigInt!
}

type UpdateOwnerSplitEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  revenueToken: Token!
  block: BigInt!
  timestamp: BigInt!
  newSplit: Int!
}

type AddSpigotEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  revenueToken: Token!
  block: BigInt!
  timestamp: BigInt!
}

type RemoveSpigotEvent implements SpigotEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  revenueToken: Token!
  block: BigInt!
  timestamp: BigInt!
}

type ClaimRevenueEvent implements SpigotEvent & SpigotControllerEvent & EventWithValue@entity {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  controller: SpigotController!
  block: BigInt!
  timestamp: BigInt!

  revenueToken: Token!
  amount: BigInt!
  escrowed: BigInt! 
  netIncome: BigInt! # amount of tokens sent to Treasury after Line cut escrowed
  value: BigDecimal!
}

# @dev only tracks revenue. does not track actual line repayment
type TradeRevenueEvent implements SpigotEvent & EventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  spigot: Spigot!
  block: BigInt!
  timestamp: BigInt!

  revenueToken: Token!
  sold: BigInt!           # amount of tokens about
  soldValue: BigDecimal!  # usd value to 8 decimals

  debtToken: Token!
  bought: BigInt!
  boughtValue: BigDecimal! # usd value to 8 decimals

  amount: BigInt!
  value: BigDecimal!
}

# Escrow

type Escrow @entity {
  id: ID! # address
  oracle: Bytes!
  owner: Bytes!
  line: LineOfCredit
  
  # not accurate in real time. just used for historical snapshots
  collateralValue: BigDecimal!

  minCRatio: BigDecimal!

  deposits: [EscrowDeposit!]! @derivedFrom(field: "escrow")
}

type EscrowDeposit @entity {
  id: ID! # address-token
  escrow: Escrow!
  enabled: Boolean!
  token: Token!
  amount: BigInt!
  events: [EscrowEvent!]! @derivedFrom(field: "deposit")
}

interface EscrowEvent {
  id: ID! # block-logIndex-txLogIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
  escrow: Escrow!
}

type EnableCollateralEvent implements EscrowEvent @entity {
  id: ID! # block-logIndex-txLogIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
  escrow: Escrow!
}

type AddCollateralEvent implements EscrowEvent & EventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!
  
  amount: BigInt!
  value: BigDecimal!
  escrow: Escrow!
}

type RemoveCollateralEvent implements EscrowEvent & EventWithValue @entity {
  id: ID! # block-logIndex-txLogIndex
  deposit: EscrowDeposit!
  block: BigInt!
  timestamp: BigInt!

  amount: BigInt!
  value: BigDecimal!
  escrow: Escrow!
}

# LiquidateEvent handled in LineOfCredit because more data available


#  Factory EVENTS 
interface DeployEvent {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  factory: Bytes!
  deployer: Bytes!
  deployedAt: Bytes!
}

type DeploySecuredLineEvent implements DeployEvent @entity {
  #DeployEvent
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  factory: Bytes!
  deployer: Bytes!
  deployedAt: Bytes!

  # LineEventWithValue conformity
  line: LineOfCredit! # same as address. Surfaces event in line logs

  # event params
  escrow: Escrow!
  spigot: Spigot!

}

type DeploySpigotEvent implements DeployEvent & SpigotControllerEvent @entity {
  # DeployEvent
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  factory: Bytes!
  deployer: Bytes!
  deployedAt: Bytes!

  # SpigotControllerEvent conformity
  controller: SpigotController!
  
  # event params
  owner: Bytes!
  operator: Bytes!
  treasury: Bytes!
}

type DeployEscrowEvent implements DeployEvent @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  factory: Bytes!
  deployer: Bytes!
  deployedAt: Bytes!

  # event params
  minCRatio: BigDecimal!
}

type Oracle @entity {
  id: ID!
  tokens: [Token!]
}
